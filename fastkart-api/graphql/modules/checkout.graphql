type CheckoutItemProducts {
    store_id: Int
    variation_id: Int
    product_id: Int
    tax: Float
    shipping_cost: Float
    single_price: Float
    quantity: Int
    subtotal: Float
}

type Checkout {
    items:[CheckoutItems]
    total:CheckoutTotal
}

type CheckoutItems {
    store: Int
    products:[CheckoutItemProducts]
    total: CheckoutItemTotal
}

type CheckoutItemTotal {
    tax_total: Float
    shipping_total:Float
    sub_total: Float
    total: Float
}

type CheckoutTotal {
    tax_total: Float
    shipping_total: Float
    points: Float
    points_amount: Boolean
    wallet_balance: Boolean
    coupon_total_discount: Float
    total: Float
    convert_point_amount: Float
    convert_wallet_balance: Float
}

input CheckoutProductsInput {
    quantity: Int
    product_id: Int
    variation_id: Int
}

input CheckoutUserAddressInput {
    street: String
    pincode: Int
    state_id: Int
    country_id: Int
    city: String
}

input CheckoutInput {
    consumer_id: Int
    coupon: String
    products: [CheckoutProductsInput]
    shipping_address_id: Int
    billing_address_id: Int
}

extend type Mutation {
    checkout(input: CheckoutInput! @spread): Checkout @field(resolver: "CheckoutMutator@calculate")
}

